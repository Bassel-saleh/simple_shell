#include "shell.h"
/**
 */
int main(void)
{
	extern char **environ;
	char command[MAX_COMMAND_LENGTH], *path = "/bin", **env = environ,
		*full_path, *args[2];
	int bytesRead, status;
	size_t full_path_size;

	while (1)
	{
		_puts("$ ");
		bytesRead = read(STDIN_FILENO, command, sizeof(command));
		if (bytesRead <= 0)
		{
			_putchar('\n');
			break;
		}
		command[bytesRead - 1] = '\0';
		if (_strcmp(command, "exit") == 0)
			break;
		else if (_strcmp(command, "env") == 0)
		{
			for (env = environ; *env; env++)
			{
				_puts(*env);
				_puts("\n");
			}
		}
		else
		{
			pid_t pid = fork();
			if (pid < 0)
				_puts("Fork error\n");
			else if (pid == 0)
			{
				full_path_size = _strlen(path) + _strlen(command) + 2;
				full_path = (char *)malloc(full_path_size);
				_strcpy(full_path, path);
				_strcat(full_path, "/");
				_strcat(full_path, command);
				args[0] = command;
				args[1] = NULL;
				execve(full_path, args, NULL);
				free(full_path);
				_puts(command);
				_puts(": command not found\n");
				exit(EXIT_FAILURE);
			}
			else
				waitpid(pid, &status, 0);
		}
	}
	return 0;
}
